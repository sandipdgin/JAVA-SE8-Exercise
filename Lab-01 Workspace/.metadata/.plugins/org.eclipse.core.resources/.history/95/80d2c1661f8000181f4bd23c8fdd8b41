package com.acme.domain;

import com.acme.utils.MyDate;

public class Order {
	/*
	 * MyDate orderDate; double orderAmount = 0.00; String customer; String
	 * product; int quantity;
	 */

	// Lab08-Encapsulation start
	private MyDate orderDate;
	private double orderAmount = 0.00;
	private String customer;
	//private String product;
	private int quantity;
	
	//private Good product;
	private Product product;
	
	/*public Order(MyDate d, double amt, String c, String p, int q) {
		orderDate = d;
		orderAmount = amt;
		customer = c;
		product = p;
		quantity = q;
	}*/
	/*public Order(MyDate d, double amt, String c, Good p, int q) {
		orderDate = d;
		orderAmount = amt;
		customer = c;
		product = p;
		quantity = q;
	}*/
	
	
	/*public Order(MyDate d, double amt, String c, Product s3, int q) {
		orderDate = d;
		orderAmount = amt;
		customer = c;
		product = s3;
		quantity = q;
	}*/
	
	// lab 14 - start
	public Order(MyDate d, double amt, String c, Product s3, int q) {
		setOrderDate(d);
		orderAmount = amt;
		customer = c;
		product = s3;
		quantity = q;
	}
	// lab 14 - end

	public void setProduct(Product product) {
		this.product = product;
	}
	/*public Good getProduct() {
		return product;
	}*/
	public Product getProduct() {
		return product;
	}

	public MyDate getOrderDate() {
		return orderDate;
	}

	/*public void setOrderDate(MyDate orderDate) {
		this.orderDate = orderDate;
	}*/
	
	// lab 14 - start
	/*public void setOrderDate(MyDate orderDate) {
		if(isHoliday(orderDate)) {
			System.out.println("Order date, " + orderDate + ", cannot be set to a holiday!");
		} else {
			this.orderDate = orderDate;
		}		
	}*/
	// lab 14 - end

	public double getOrderAmount() {
		return orderAmount;
	}

	public void setOrderAmount(double orderAmount) {
		if (orderAmount > 0) {
			this.orderAmount = orderAmount;
		} else {
			System.out.println("Attempting to set the orderAmount to a value less than or equal to zero");
		}
	}

	public String getCustomer() {
		return customer;
	}

	public void setCustomer(String customer) {
		this.customer = customer;
	}

	public int getQuantity() {
		return quantity;
	}

	public void setQuantity(int quantity) {
		 if (quantity > 0) {
			 this.quantity = quantity;
		 } else {
			 System.out.println("Attempting to set the quantity to a value less than or equal to zero");
		 }
	 }

	public static double getTaxRate() {
		return taxRate;
	}

	// Lab08-Encapsulation end

	// static double taxRate = 0.05;
	// static double taxRate;
	public static double taxRate = 0.05;

	

	public String toString() {
		return quantity + " ea. " + product + " for " + customer;
	}

	public static void setTaxRate(double newRate) {
		taxRate = newRate;
	}

	public static void computeTaxOn(double anAmount) {
		System.out.println("The tax for " + anAmount + " is: " + anAmount * Order.taxRate);
	}

	public double computeTax() {
		System.out.println("The tax for this order is: " + orderAmount * Order.taxRate);
		return orderAmount * Order.taxRate;
	}

	// bonus lab
	/*public Order(MyDate d, double amt, String c) {
		orderDate = d;
		orderAmount = amt;
		customer = c;
		product = "Anvil";
		quantity = 1;
	}*/

	// lab 6
	public char jobSize() {
		// ... add your code here to compute and
		// return the job size for an order.
		if (quantity <= 25) {
			return 'S';
		} else if (quantity <= 75) {
			return 'M';
		} else if (quantity <= 150) {
			return 'L';
		}
		return 'X';

	}

	public double computeTotal() {
		double total = orderAmount;
		switch (jobSize()) {
		case 'M':
			total = total - (orderAmount * 0.01);
			break;
		case 'L':
			total = total - (orderAmount * 0.02);
			break;
		case 'X':
			total = total - (orderAmount * 0.03);
			break;
		}
		if (orderAmount <= 1500) {
			total = total + computeTax();
		}
		return total;

	}
	
	// lab 12 - start
	private static Rushable rushable;
	
	public static Rushable getRushable() {
		return rushable;
	}
	public static void setRushable(Rushable rushable) {
		Order.rushable = rushable;
	}
	
	public boolean isPriorityOrder() {
		boolean priorityOrder = false;
		if( rushable != null ) {
			priorityOrder = rushable.isRushable(orderDate, orderAmount);
		}
		return priorityOrder;
	}
	
	// lab 12 - end
	
	
	// lab 14 - start
	private boolean isHoliday(MyDate proposedDate) {
		boolean result = false;
		for (MyDate holiday : MyDate.getHolidays()) {
			if( holiday.equals(proposedDate) ) {
				result = true;
			}
		}
		return result;
	}
	
	/*public void setOrderDate(MyDate orderDate){
		
	}*/
	
	//lab 14 - end
	
	//lab 17 - start
	public void setOrderDate(MyDate orderDate) {
		if(isHoliday(orderDate)) {
			System.out.println("Order date, " + orderDate + ", cannot be set to a holiday!");
		} else {
			this.orderDate = orderDate;
		}		
	}
	//lab 17 - end

}
